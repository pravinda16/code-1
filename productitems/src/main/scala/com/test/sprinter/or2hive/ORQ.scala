package com.citi.sprinter.or2hive

//  Author: Simon(jy44875) Time: 2017-01-23

object ORQ {
  def getQ(db:String, tb:String, cz: Int) :String = {
    s"""(
WITH EXTENTS_DATA AS (
  SELECT /*+ NO_MERGE */
    O.DATA_OBJECT_ID,
    E.FILE_ID, 
    E.BLOCK_ID,
    E.BLOCKS
  FROM DBA_EXTENTS E
  JOIN DBA_OBJECTS O
  ON E.OWNER = O.OWNER
    AND E.SEGMENT_NAME = O.OBJECT_NAME
    AND E.SEGMENT_TYPE = O.OBJECT_TYPE
    AND DECODE(E.PARTITION_NAME, O.SUBOBJECT_NAME, 0, 1) = 0
  WHERE E.SEGMENT_TYPE IN( 'TABLE', 'TABLE PARTITION', 'TABLE SUBPARTITION')
    AND E.OWNER = '$db'
    AND E.SEGMENT_NAME = '$tb'
), EXTENTS_WITH_SUMS AS (
  SELECT
    SUM(BLOCKS) OVER() AS TOTAL_BLOCKS,
    SUM(BLOCKS) OVER( ORDER BY DATA_OBJECT_ID, FILE_ID, BLOCK_ID) - BLOCKS AS FIRST_EXTENT_BLOCK,
    SUM(BLOCKS) OVER( ORDER BY DATA_OBJECT_ID, FILE_ID, BLOCK_ID) - 1      AS LAST_EXTENT_BLOCK,
    E.*
  FROM EXTENTS_DATA E
), FILTERED_EXTENTS AS (
  SELECT
  * 
  FROM (
    SELECT
      WIDTH_BUCKET(FIRST_EXTENT_BLOCK-1, 0, TOTAL_BLOCKS, $cz) AS PREV_CHUNK,
      WIDTH_BUCKET(LAST_EXTENT_BLOCK+1, 0,  TOTAL_BLOCKS, $cz) AS NEXT_CHUNK,
      E.*
      FROM EXTENTS_WITH_SUMS E
  )
  WHERE PREV_CHUNK < NEXT_CHUNK
), CHUNK_BOUNDARIES AS (
  SELECT 
    LEVEL CHUNK,
    CEIL( (LEVEL-1) * TOTAL_BLOCKS / $cz - 1 ) + 1 FIRST_CHUNK_BLOCK,
    CEIL(  LEVEL    * TOTAL_BLOCKS / $cz - 1 )     LAST_CHUNK_BLOCK
  FROM (SELECT TOTAL_BLOCKS FROM EXTENTS_WITH_SUMS WHERE ROWNUM = 1)
  CONNECT BY LEVEL <= LEAST($cz, TOTAL_BLOCKS)
), ROWIDS AS (
  SELECT  CHUNK,
    CASE WHEN B.FIRST_CHUNK_BLOCK BETWEEN E.FIRST_EXTENT_BLOCK AND E.LAST_EXTENT_BLOCK THEN
        DBMS_ROWID.ROWID_CREATE(
          1, DATA_OBJECT_ID, FILE_ID,
          BLOCK_ID + FIRST_CHUNK_BLOCK - FIRST_EXTENT_BLOCK, 0
        )
    END AS START_ROWID,
    CASE WHEN B.LAST_CHUNK_BLOCK BETWEEN E.FIRST_EXTENT_BLOCK AND E.LAST_EXTENT_BLOCK THEN
        DBMS_ROWID.ROWID_CREATE(
          1, DATA_OBJECT_ID, FILE_ID,
          BLOCK_ID + LAST_CHUNK_BLOCK - FIRST_EXTENT_BLOCK, 32767
        )
    END AS END_ROWID
  FROM CHUNK_BOUNDARIES B
  JOIN FILTERED_EXTENTS E
  ON B.FIRST_CHUNK_BLOCK BETWEEN E.FIRST_EXTENT_BLOCK AND E.LAST_EXTENT_BLOCK
   OR B.LAST_CHUNK_BLOCK BETWEEN E.FIRST_EXTENT_BLOCK AND E.LAST_EXTENT_BLOCK
)
SELECT
  ROWNUM, START_ROWID, END_ROWID
FROM 
(
  SELECT CHUNK, MAX(START_ROWID) START_ROWID, MAX(END_ROWID) END_ROWID
  FROM ROWIDS
  GROUP BY CHUNK
  ORDER BY 2
) B
) A"""

  }
  
}